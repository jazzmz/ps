/*pirin-uni.p*/
/* Èíêàññîâîå ïîðó÷åíèå */
/* (ñ) 2012 Ãîí÷àðîâ À.Å. */

&IF "{&OFFSET}" EQ "NO" &THEN
      &SCOP OFFSET_VAL 0
&ELSE
      &SCOP OFFSET_VAL 1703
&ENDIF

&SCOP KOEF 2

  &IF DEFINED(SET_DATA) &THEN
   DEFINE VAR lzr-Cond-Pay       AS CHARACTER
                                    EXTENT      3 NO-UNDO.
   DEFINE VAR lzr-Amt-Rub        AS CHARACTER
                                    EXTENT      3 NO-UNDO.
   DEFINE VAR lzr-Plat-Name      AS CHARACTER
                                    EXTENT      6 NO-UNDO.
   DEFINE VAR lzr-Plat-Bank      AS CHARACTER
                                    EXTENT      3 NO-UNDO.
   DEFINE VAR lzr-Pol-Name       AS CHARACTER
                                    EXTENT      6 NO-UNDO.
   DEFINE VAR lzr-Pol-Bank       AS CHARACTER
                                    EXTENT      3 NO-UNDO.
   DEFINE VAR lzr-Details        AS CHARACTER
                                    EXTENT      8 NO-UNDO.
   DEFINE VAR vInnPl             AS CHARACTER     NO-UNDO.
   DEFINE VAR vInnPo             AS CHARACTER     NO-UNDO.
   DEFINE VAR vKppPl             AS CHARACTER     NO-UNDO.
   DEFINE VAR vKppPo             AS CHARACTER     NO-UNDO.
   DEFINE VAR vI                 AS INT64       NO-UNDO.
   DEFINE VARIABLE vII 		 AS INT64 	NO-UNDO.

   DEFINE VARIABLE vIsLonglzr-Pol-Name AS LOGICAL NO-UNDO.
   DEFINE VARIABLE vIsLongPlaName AS LOGICAL NO-UNDO.
   DEFINE VARIABLE vIsLongPolName AS LOGICAL NO-UNDO.

   vIsLonglzr-Pol-Name = NO.
   vIsLongPlaName = NO.
   vIsLongPolName = NO.

   DEFINE VARIABLE cUserID AS CHARACTER NO-UNDO.
   DEFINE VARIABLE cUserNAME AS CHARACTER NO-UNDO.


   ASSIGN
      lzr-Amt-Rub[1]   = AmtStr[1] + " " +
                         AmtStr[2] + " " +
                         AmtStr[3].
      lzr-Plat-Name[1] = PlName[1] + " " +
                         PlName[2] + " " +
                         PlName[3] + " " +
                         PlName[4] + " " +
                         PlName[5].
      lzr-Plat-Bank[1] = PlRKC[1] + " " +
                         PlRKC[2].
      lzr-Pol-Bank[1]  = PoRKC[1] + " " +
                         PoRKC[2].
      lzr-Pol-Name[1]  = PoName[1] + " " +
                         PoName[2] + " " +
                         PoName[3] + " " +
                         PoName[4] + " " +
                         PoName[5].
      lzr-Details[1]   = Detail[1] + "|" +
                         Detail[2] + "|" +
                         Detail[3] + "|" +
                         Detail[4] + "|" +
                         Detail[5]
   .

   {wordwrap.i &s=lzr-Amt-Rub     &n=2 &l=63}
   {wordwrap.i &s=lzr-Plat-Bank   &n=2 &l=39}
   {wordwrap.i &s=lzr-Pol-Bank    &n=2 &l=39}



   IF LENGTH(lzr-Pol-Name[4]) GT 0 THEN
   DO:
      vIsLongPolName = YES.

      lzr-Pol-Name[1] = lzr-Pol-Name[1] + " " +
                        lzr-Pol-Name[2] + " " +
                        lzr-Pol-Name[3] + " " +
                        lzr-Pol-Name[4] + " " +
                        lzr-Pol-Name[5] + " " +
                        lzr-Pol-Name[6].

      {wordwrap.i &s=lzr-Pol-Name   &n=6 &l=65}
   END.



   IF FGetSetting("ÈñêëÈÍÍ","","Äà") EQ "Äà" AND lzr-Plat-Name[1] BEGINS "ÈÍÍ " THEN
   DO:
      vI = 4.
      
      DO WHILE SUBSTRING(lzr-Plat-Name[1],vI,1) EQ " ":
         vI = vI + 1.
      END.
      
      DO WHILE LOOKUP(SUBSTRING(lzr-Plat-Name[1],vI,1),"0,1,2,3,4,5,6,7,8,9") > 0 :
         vI = vI + 1.
      END.

      ASSIGN
         vInnPl           = trim(substring(lzr-Plat-Name[1],5,vI - 5))
         lzr-Plat-Name[1] = substring(lzr-Plat-Name[1],vI)
      . 
   END.

   IF FGetSetting("ÈñêëÈÍÍ","","Äà") EQ "Äà" AND lzr-Pol-Name[1] BEGINS "ÈÍÍ " THEN
   DO:
      vI = 4.
      
      DO WHILE SUBSTRING(lzr-Pol-Name[1],vI,1) EQ " " :
         vI = vI + 1.
      END.
      
      DO WHILE LOOKUP(SUBSTRING(lzr-Pol-Name[1],vI,1),"0,1,2,3,4,5,6,7,8,9") > 0 :
         vI = vI + 1.
      END.

      ASSIGN
         vInnPo           = trim(substring(lzr-Pol-Name[1],5,vI - 5))
         lzr-Pol-Name[1] = substring(lzr-Pol-Name[1],vI)
      . 
   END.

   IF lzr-Plat-Name[1] BEGINS "ÊÏÏ " THEN
   DO:
      vI = 4.
      
      DO WHILE SUBSTRING(lzr-Plat-Name[1],vI,1) EQ " ":
         vI = vI + 1.
      END.
      
      DO WHILE LOOKUP(SUBSTRING(lzr-Plat-Name[1],vI,1),"0,1,2,3,4,5,6,7,8,9") > 0 :
         vI = vI + 1.
      END.

      ASSIGN
         vKppPl           = trim(substring(lzr-Plat-Name[1],5,vI - 5))
         lzr-Plat-Name[1] = substring(lzr-Plat-Name[1],vI)
      . 
   END.

   IF lzr-Pol-Name[1] BEGINS "ÊÏÏ " THEN
   DO:
      vI = 4.
      
      DO WHILE SUBSTRING(lzr-Pol-Name[1],vI,1) EQ " " :
         vI = vI + 1.
      END.
      
      DO WHILE LOOKUP(SUBSTRING(lzr-Pol-Name[1],vI,1),"0,1,2,3,4,5,6,7,8,9") > 0 :
         vI = vI + 1.
      END.

      ASSIGN
         vKppPo           = trim(substring(lzr-Pol-Name[1],5,vI - 5))
         lzr-Pol-Name[1] = substring(lzr-Pol-Name[1],vI)
      . 
   END.
   {wordwrap.i &s=lzr-Plat-Name   &n=6 &l=39}
   {wordwrap.i &s=lzr-Pol-Name    &n=6 &l=39}
   {wordwrap.i &s=lzr-Details     &n=8 &l=70}
   ASSIGN
      lzr-Plat-Bank[2] = substring(lzr-Plat-Bank[2], 1,39)
      lzr-Pol-Bank[2]  = substring(lzr-Pol-Bank[2],  1,39)
   .

   IF LENGTH(lzr-Plat-Name[4]) GT 0 THEN
   DO:
      vIsLongPlaName = YES.

      lzr-Plat-Name[1] = lzr-Plat-Name[1] + " " +
                         lzr-Plat-Name[2] + " " +
                         lzr-Plat-Name[3] + " " +
                         lzr-Plat-Name[4] + " " +
                         lzr-Plat-Name[5] + " " +
                         lzr-Plat-Name[6].

      {wordwrap.i &s=lzr-Plat-Name   &n=6 &l=65}
   END.

   IF LENGTH(lzr-Pol-Name[4]) GT 0 THEN
   DO:
      vIsLonglzr-Pol-Name = YES.

      lzr-Pol-Name[1] = lzr-Pol-Name[1] + " " +
                        lzr-Pol-Name[2] + " " +
                        lzr-Pol-Name[3] + " " +
                        lzr-Pol-Name[4] + " " +
                        lzr-Pol-Name[5] + " " +
                        lzr-Pol-Name[6].

      {wordwrap.i &s=lzr-Pol-Name   &n=6 &l=65}
   END.

&ENDIF



&IF DEFINED(PRINT) &THEN

RUN PUT_PCL_STR(187 * {&KOEF},  ( 20  +  {&OFFSET_VAL} ) * {&KOEF},
                   (IF op.ins-date EQ ? THEN ""
                                        ELSE string(op.ins-date, "99.99.9999")
                   ),                                                                   INPUT-OUTPUT buf-str).

   RUN PUT_PCL_STR(620 * {&KOEF},  20 +   {&OFFSET_VAL}, mSpisPl,         INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(850 * {&KOEF},  ( 200 +  {&OFFSET_VAL} ) * {&KOEF}, trim(op.doc-num),INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1141 * {&KOEF}, ( 197 +  {&OFFSET_VAL} ) * {&KOEF}, trim(theDate),   INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(380 * {&KOEF},  610 +  {&OFFSET_VAL}, lzr-Amt-Rub[1],  INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(380 * {&KOEF},  660 +  {&OFFSET_VAL}, lzr-Amt-Rub[2],  INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1700 * {&KOEF}, ( 197 +  {&OFFSET_VAL} ) * {&KOEF}, trim(paytype),   INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1505 * {&KOEF}, ( 485 +  {&OFFSET_VAL} ) * {&KOEF}, trim(rub),       INPUT-OUTPUT buf-str).

   RUN PUT_PCL_STR(245 * {&KOEF},  (485 +  {&OFFSET_VAL} ) * {&KOEF}, PlINN,           INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(825 * {&KOEF}, ( 485 +  {&OFFSET_VAL} ) * {&KOEF}, PlKPP,           INPUT-OUTPUT buf-str). 

   RUN PUT_PCL_STR(245 * {&KOEF},  ( 485 +  {&OFFSET_VAL} ) * {&KOEF}, innpl,           INPUT-OUTPUT buf-str).

   IF vIsLongPlaName THEN
      RUN PRINT_COMPRESSED(                                   INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(130 * {&KOEF},  ( 563 +  {&OFFSET_VAL} ) * {&KOEF}, lzr-Plat-Name[1],     INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(130 * {&KOEF},  ( 623 +  {&OFFSET_VAL} ) * {&KOEF}, lzr-Plat-Name[2],     INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(130 * {&KOEF},  ( 663 +  {&OFFSET_VAL} ) * {&KOEF}, lzr-Plat-Name[3],     INPUT-OUTPUT buf-str).
   IF vIsLongPlaName THEN
      RUN PRINT_PITCH(                                        INPUT-OUTPUT buf-str).

   RUN PUT_PCL_STR(130 * {&KOEF},  (775  + {&OFFSET_VAL} ) * {&KOEF}, lzr-Plat-Bank[1],INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(130 * {&KOEF},  (820  + {&OFFSET_VAL} ) * {&KOEF}, lzr-Plat-Bank[2],INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1505 * {&KOEF}, (662 +  {&OFFSET_VAL} ) * {&KOEF}, SUBSTRING(pllacct,1,25),
                                                                INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1505 * {&KOEF}, (783 +  {&OFFSET_VAL} ) * {&KOEF}, plmfo,           INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1505 * {&KOEF}, (840 +  {&OFFSET_VAL} ) * {&KOEF}, SUBSTRING(plCAcct,1,25),
                                                                INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1505 * {&KOEF}, (958  + {&OFFSET_VAL} ) * {&KOEF}, pomfo,           INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1505 * {&KOEF}, (1013 + {&OFFSET_VAL} ) * {&KOEF}, SUBSTRING(pocacct,1,25),
                                                                INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1505 * {&KOEF}, (1131 + {&OFFSET_VAL} ) * {&KOEF}, SUBSTRING(poacct,1,25),
                                                                INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(245 * {&KOEF},  (1133 + {&OFFSET_VAL} ) * {&KOEF}, PoINN,           INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(825 * {&KOEF},  (1133 + {&OFFSET_VAL} ) * {&KOEF}, PoKPP,           INPUT-OUTPUT buf-str).

   IF vIsLongPolName THEN
      RUN PRINT_COMPRESSED(                                   INPUT-OUTPUT buf-str).

   RUN PUT_PCL_STR(130 * {&KOEF},  (1200 + {&OFFSET_VAL} ) * {&KOEF}, lzr-Pol-Name[1], INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(130 * {&KOEF},  (1245 + {&OFFSET_VAL} ) * {&KOEF}, lzr-Pol-Name[2], INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(130 * {&KOEF},  (1290 + {&OFFSET_VAL} ) * {&KOEF}, lzr-Pol-Name[3], INPUT-OUTPUT buf-str).

   IF vIsLongPolName THEN
      RUN PRINT_PITCH(                                        INPUT-OUTPUT buf-str).

   RUN PUT_PCL_STR(130 * {&KOEF},  (965  + {&OFFSET_VAL} ) * {&KOEF}, lzr-Pol-Bank[1], INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(130 * {&KOEF}, (1000  + {&OFFSET_VAL} ) * {&KOEF}, lzr-Pol-Bank[2], INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1505 * {&KOEF}, (1255 + {&OFFSET_VAL} ) * {&KOEF},
                   (IF avail(doc-type) THEN doc-type.digital
                                       ELSE "er"),              INPUT-OUTPUT buf-str).

   IF INT64(op.order-pay) GT 0 THEN
      RUN PUT_PCL_STR(1975 * {&KOEF}, (1283 + {&OFFSET_VAL} ) * {&KOEF}, STRING(INT64(op.order-pay)),
                                                                INPUT-OUTPUT buf-str).
   RUN PRINT_ELITE(                                             INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(130 * {&KOEF},  (1485 + {&OFFSET_VAL} ) * {&KOEF}, Detail[1],  INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(130 * {&KOEF},  (1535 + {&OFFSET_VAL} ) * {&KOEF}, Detail[2],  INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(130 * {&KOEF},  (1585 + {&OFFSET_VAL} ) * {&KOEF}, Detail[3],  INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(130 * {&KOEF},  (1635 + {&OFFSET_VAL} ) * {&KOEF}, Detail[4],  INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(130 * {&KOEF},  (1685 + {&OFFSET_VAL} ) * {&KOEF}, Detail[5],  INPUT-OUTPUT buf-str).
   RUN PRINT_PITCH(                                             INPUT-OUTPUT buf-str).

   /*Íîâûå ïîëÿ*/
   RUN PUT_PCL_STR(2185 * {&KOEF}, (197  + {&OFFSET_VAL} ) * {&KOEF}, mPokST,          INPUT-OUTPUT buf-str).
   RUN PRINT_ELITE(                                             INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(150 * {&KOEF},  (1425 + {&OFFSET_VAL} ) * {&KOEF}, mKBK,            INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(690 * {&KOEF},  (1425 + {&OFFSET_VAL} ) * {&KOEF}, mOKATO,          INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1030 * {&KOEF}, (1425 + {&OFFSET_VAL} ) * {&KOEF}, mPokOp,          INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1157 * {&KOEF}, (1425 + {&OFFSET_VAL} ) * {&KOEF}, mPokNP,          INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1440 * {&KOEF}, (1425 + {&OFFSET_VAL} ) * {&KOEF}, mPokND,          INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1855 * {&KOEF}, (1425 + {&OFFSET_VAL} ) * {&KOEF}, mPokDD,          INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(2170 * {&KOEF}, (1425 + {&OFFSET_VAL} ) * {&KOEF}, mPokTP,          INPUT-OUTPUT buf-str).
   RUN PRINT_PITCH(                                             INPUT-OUTPUT buf-str).

   RUN PUT_PCL_STR(1855 * {&KOEF}, (1961 + {&OFFSET_VAL} ) * {&KOEF}, mDateMarcRec,    INPUT-OUTPUT buf-str).

   RUN PUT_PCL_STR(1855 * {&KOEF}, (1961 + {&OFFSET_VAL} ) * {&KOEF}, "",    INPUT-OUTPUT buf-str).
   RUN PUT_PCL_STR(1855 * {&KOEF}, (2366 + {&OFFSET_VAL} ) * {&KOEF}, TRIM(STRING(mDateCart,"99.99.9999")),   INPUT-OUTPUT buf-str).

   RUN PRINT_COMPRESSED(INPUT-OUTPUT buf-str).
   DO vII = 1 TO EXTENT(mPrnStr-El-Doc):
       RUN PUT_PCL_STR(1750 * {&KOEF},
                       (2550 + 50 * (vII - 1) + {&OFFSET_VAL} ) * {&KOEF},
                       TRIM(mPrnStr-El-Doc[vII]),
                       INPUT-OUTPUT buf-str).
   END.
   RUN PRINT_PITCH(INPUT-OUTPUT buf-str). 

   RUN PUT_PCL_STR(1730 * {&KOEF}, ( 2860 + {&OFFSET_VAL} ) * {&KOEF}, STRING(op.op-date, "99.99.9999"), INPUT-OUTPUT buf-str).

   RUN PRINT_ELITE(                                             INPUT-OUTPUT buf-str).
   cUserID = OP.user-id.
   FIND FIRST _user WHERE _user._userid EQ cUserID NO-LOCK NO-ERROR. 
      cUserNAME = _user._user-name. 

       RUN PUT_PCL_STR(1530 * {&KOEF}, ( 2930 + {&OFFSET_VAL} ) * {&KOEF}, cUserNAME,     INPUT-OUTPUT buf-str). 

&ENDIF


